import random
import logging
# This is imported because this python version doesn't support OR operators for function parameter typing.
from typing import Union, List

class Agent():
    def __init__(self, group_str, threshold: Union[float, None] = 0.1, x: int = -1, y: int = -1):
        """
        When we make an agent, weâ€™ll pass a string (X or O as a constructor).
        In the constructor, the agent should randomly decide on a
        threshold that should be a random between 0.1 and 0.9.
        """
        self.group = group_str
        self.threshold = None
        self.x = x  # Grid x-coordinate (row)
        self.y = y  # Grid y-coordinate (column)
        
        # generates a random number between 0.1 and 0.9 (inclusive)
        # and rounds it to the hundredths place
        #
        # Allow an override for threshold to support testing
        self.logger = logging.getLogger("shelling-model-logger")

        if(threshold is None):
            self.threshold = round(random.uniform(0.1, 0.9), 2)
        else:
            self.threshold = threshold

    def __str__(self):
        return self.group
    
    # This was added to support the expansion of this assignment to evaluate the satisfaction 
    # of an entire neighborhood rather than a single agent.
    def get_location(self):
        """Return the agent's current (x, y) location on the grid"""
        return (self.x, self.y)
    
    def set_location(self, x: int, y: int):
        """Set the agent's location on the grid"""
        self.x = x
        self.y = y
    
    def __eq__(self, other):
        """Enable equality comparison using == operator"""
        if not isinstance(other, Agent):
            return False
        return self.compare(other)
    
    def compare(self, other: Union['Agent', None]) -> bool:
        """
        This method should take in another Agent object
        return true if both the current object
        and this one are of the same group.
        """
        if other is None:
            return False

        return self.group == other.group

    # This was added to support the expansion of the assignment which 
    # requires the calculation of the satisfaction percentage of an entire neighborhood.
    def satisfaction_perc(self, agent_list: List[Union['Agent', None]]) -> bool:
        same_group_count = 0
        other_group_count = 0
        for agent in agent_list:
            if agent is None:
                continue

            if self.compare(agent):
                same_group_count += 1
            else:
                other_group_count += 1
        
        total_neighbors = same_group_count + other_group_count
        if total_neighbors == 0:
            return 1.0  # If no neighbors, agent is satisfied by default
        return (same_group_count / total_neighbors) / self.threshold

    def is_satisfied(self, agent_list: List[Union['Agent', None]]) -> bool:
        """
        This method will take in a list of neighboring agents
        (generated by our City class) and return True if the
        agent is satisfied (meaning it passes the threshold).
        Be advised! There will be elements in this list that
        are None type.
        """
        
        return self.satisfaction_perc(agent_list) >= 1
            
